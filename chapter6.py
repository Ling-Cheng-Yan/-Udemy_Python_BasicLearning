'''
dictionary 字典 (第六種Data Type，簡寫為dict)
複習Data Type:
	1. int
	2. float
	3. bool
	4. str
	5. list
	6. dict
字典想像成真正的字典，去查單字那樣。字典的術語為，左邊那些就是key，對應的就叫做value。key功能主要用來查找。
字典在寫的時候，都會寫成有多行式，最後也可以有逗點也沒差。記得去查的時候，一定都是用key去查。
'''
#宣告字典
words = {
	'ramen': '拉麵',
	'pasta': '義大利麵'
}
print(words['ramen'])


#增加字典新的key以及value。沒有等號的時候會去查找，有等號會去增加。另外，如果本身字典已經有這個key了，那你去做這個動作就等於去更新key的value的意思。
words['tea'] = '茶'


#字典應用情形，用來把東西的屬性名稱記錄下來，因為清單很難做到這樣。而且通常所有網站的儲存資料都是用字典，不然就是字典和清單混用。
p0 = {
	'name': '麥香奶茶',
	'price': 10
}
p1 = {
	'name': '珍珠奶茶',
	'price': 60
}


#字典和清單可以混用，且常常混用。
drinks = [p0, p1] #此drinks是一個清單，裡面裝著字典。
drinks[0] #第一個字典，即p0
drinks[0]['name'] #第一個字典當中的key，就是'麥香奶茶'


'''
在python中所有東西都是物件，意思是指
x = 5
y = 'Allen'
這些x和y和5和'Allen'都是物件，只不過5和x的型別是整數，'Allen'和y的型別是字串。
所以那六個Data Type都是物件，只是型別不同而已。不同型別會有他專屬的功能。
另外，寫class可以發明物件型別。
'''


'''
1. class其實對於python可有可無，沒有說一定要。
2. 當開發大專案/具規模的程式/發表成套件，才會寫成class，例如GUI會用很多class。
'''




'''
class類別/object物件 文字版教學
在講class 跟 object 的時候，必須把第三個字一起講 ： type(型別) 
這三個詞最短版的教學就是：
寫class 才可以發明自己的type(型別) ，然後就可以做出這個type(型別)的object(物件)。


長版解釋是這樣的，
大家請聽我娓娓道來，
object這個字翻成物件，
你真的要想像成＂東西＂就好了。每個東西都有型別，就好像每隻動物都有品種。

不同種類英雄人物，是不是有不同的超能力，

這一類的英雄都可以吐火，
那一類的英雄都可以飛，
這一類的英雄都可以變成石頭人。

想像成

白話文講：不同種類的東西有不同的能力

術語講：不同型別的物件有不同的能力

例如
字串這種型別有什麼超能力？
可以做split() ，可以做strip()  還有很多
清單這種型別有什麼超能力？
可以做append() 把東西加進去對不對

這樣你就有概念了，
不同種類(型別)的東西有自己不同的能力(function)。

你要清楚的是
所謂的"型別"只是"種類"，很多東西可能屬於同一種類。
x = 5
y = 10
x, y兩個不同的＂物件＂都是屬於＂整數＂這個種類(型別)的。



再來，就談到寫class來自己發明型別，

就是要透過寫class（類別）（也就是種類，也就是型別)，
順道一提：我一直覺得class翻譯成類別很不好，應該直接翻成型別，
因為它明明就是在發明型別。
要說成寫（類別）在發明型別，聽起來會很怪，但沒辦法，中文就是翻成類別。

所以寫class根本就是在寫一個型別。
這是在【發明】一個型別
就跟你寫function一樣，我寫一個

def add(x, y):
    return x + y
我是不是發明了一個function
所以這都有【發明】的概念。
寫一個class就可以發明一個型別，然後我要設計清楚他有哪些＂超能力＂，也就是這個型別的功能。

好了，你現在懂了發明型別，就是要寫class。
再來你要理解，
發明完型別，我們可以【做出】這個型別的物件。
例如我發明一個型別叫做Batman 蝙蝠俠，這個型別當然不是python內建的型別(整數，字串...等等)

這是我自己發明的型別，然後我就可以做出一個 蝙蝠俠的物件。
就寫Batman()  
後面有這個括號就是製作物件的意思。
就好像function，你寫了也只是發明function而已，你還是要寫add()  才是使用這個function，因為有括號。

型別的話，有括號，就變成製作物件了。
所以Batman()  這句話會做出一個Batman型別的物件。

那麼如果我在寫這個Batman這個class的時候（我在發明這個型別的時候），假設我當時設計了一個 attack（攻擊）的功能(function)給它。

我就可以針對我做出來的物件，使用這個function。
例如：

b = Batman() # 做出Batman型別的一個物件
b.attack() # 使用這個物件的attack function
什麼是class（類別）什麼是object（物件）
這樣大家有沒有清楚了！
有問題隨時到討論區發問！

----------------------

P.S. 通常在講型別的功能(function)，術語上會改成稱呼為method，但其實就是function，只是改了一個稱呼
換句話說，寫在class裡的function，會被稱呼為method，就不再叫它function，很怪，我知道。當時這樣設計的人肯定是有所目的要做出區別性，把型別裡的function跟不是型別裡的function刻意分開談。
'''